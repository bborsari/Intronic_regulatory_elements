#*******
# 1. get bedfile of all ccREs
# from: http://screen.encodeproject.org/
# "Downloads" - 5 group hg19
gunzip ENCFF788SJC.bed.gz
#*******

#*******
# 2. select ELS regions
awk '$NF=="255,205,0"' ENCFF788SJC.bed | cut -f-4 > ELS.enhancers.bed
#*******

#******
# 3. merge info regarding
# classification of 991173 ELS regions
# across adult samples 
awk 'BEGIN{FS="\t"; OFS="_"}{print $1, $2, $3, $4}' ELS.enhancers.bed | sed '1iregion' > merged.table.tsv 
cut -f1,3,5 5-group.ccREs.hg19.bigBed.txt | awk 'BEGIN{FS=OFS="\t"}$3=="adult"{print $1}' | while read file_id; do conda activate ENCODE_RC; bigBedToBed bigBed.files/hg19/"$file_id".bigBed tmp.bed; conda deactivate; ~/bin/join.py -b merged.table.tsv -a <(awk 'BEGIN{FS="\t"; OFS="_"}{print $1, $2, $3, $4"\t"$NF}' tmp.bed) --b_header > tmp2; awk -v file_id="$file_id" 'BEGIN{FS=OFS="\t"}{if(NR==1){$NF=file_id}; print $0}' tmp2 > merged.table.tsv; rm tmp2; rm tmp.bed; done
#******

#******
# 4. convert the above table
# into a binary table
cat merged.table.tsv | awk 'BEGIN{FS=OFS="\t"}{if (NR==1){print $0} else {for (i=2; i<=NF; i++){if ($i=="255,205,0"){$i=1}else {$i=0}}; print $0}}' > tmp; mv tmp merged.table.tsv
#******

#******
# 5. to generate distance matrix between all 60 adult samples
# (the distance matrix is stored inside dist.Rdata)
# ~bborsari/software/R-3.5.2/bin/R
# m <- as.data.frame(fread("merged.table.tsv"))
# rownames(m) <- m$region
# m$region <- NULL
# t.m <- t(m)
# dist.t.m <- dist(t.m, method = "binary")
# dist.t.m.mat <- as.matrix(dist.t.m)
#******

#******
# 6. subset merged table to keep only the 25 selected tissues
awk '$1=="common"' tissues.groups.tsv | while read group tissues ids tot req other; do cols=$(grep -Ff <(echo $ids | sed 's/:/\n/g;s/\"//g') <(head -1 merged.table.tsv | awk '{for (i=1;i<=NF;i++){print i"\t"$i}}') | cut -f1 | awk 'BEGIN{a=""}{if (a==""){a=a""$1} else {a=a","$1}}END{print a}'); cut -f1,$cols merged.table.tsv; done > merged.table.subset.tsv
#******

#******
# 7. generate bedfiles of group-ELS ccREs
# as those ccREs classified as ELS in >= 80% of a group samples

mkdir group.ELS
cut -f1 tissues.groups.tsv | while read group; do mkdir -p group.ELS/"$group"; done
awk '$1!="common"' tissues.groups.tsv | while read group tissues ids tot req other; do cols=$(grep -Ff <(echo $ids | sed 's/:/\n/g;s/\"//g') <(head -1 merged.table.subset.tsv | awk '{for (i=1;i<=NF;i++){print i"\t"$i}}') | cut -f1 | awk 'BEGIN{a=""}{if (a==""){a=a""$1} else {a=a","$1}}END{print a}'); cut -f1,"$cols" merged.table.subset.tsv | awk -v req="$req" 'BEGIN{FS=OFS="\t"}{n=0; for (i=2;i<=NF;i++){if ($i==1){n++}}; if (n>=req){split($1, a, "_"); print a[1], a[2], a[3], a[4]}}' > group.ELS/"$group"/"$group".ELS.bed; done
#******

#******
# 8. generate bedfile of group-specific ELS ccREs
# as those ccREs classified as ELS in at least 80% of a group samples
# and at most 0 (iPS/fibro_myoblasts) 
# or 1 (blood/brain/mesoderm) other non-group samples
awk '$1!="common"' tissues.groups.tsv | while read group tissues ids tot req other; do cols=$(grep -Ff <(echo $ids | sed 's/:/\n/g;s/\"//g') <(head -1 merged.table.subset.tsv | awk '{for (i=1;i<=NF;i++){print i"\t"$i}}') | cut -f1 | awk 'BEGIN{a=""}{if (a==""){a=a""$1} else {a=a","$1}}END{print a}'); ~/bin/selectRows.sh <(cut -f1,"$cols" merged.table.subset.tsv | awk -v req="$req" 'BEGIN{FS=OFS="\t"}{n=0; for (i=2;i<=NF;i++){if ($i==1){n++}}; if (n>=req){print $1}}') <(cut --complement -f"$cols" merged.table.subset.tsv) | awk 'BEGIN{FS=OFS="\t"}{n=0; for (i=2;i<=NF;i++){if ($i==1){n++}}; print $1, n}' | awk -v other="$other" 'BEGIN{FS=OFS="\t"}$2<=other{split($1, a, "_"); print a[1], a[2], a[3], a[4]}' > group.ELS/"$group"/"$group".specific.ELS.bed; done
#******

#******
# 9. generate bedfile of common ELS ccREs
# as those ccREs classified as ELS in 100% of the samples
awk '$1=="common"' tissues.groups.tsv | while read group tissues ids tot req other; do cols=$(grep -Ff <(echo $ids | sed 's/:/\n/g;s/\"//g') <(head -1 merged.table.subset.tsv | awk '{for (i=1;i<=NF;i++){print i"\t"$i}}') | cut -f1 | awk 'BEGIN{a=""}{if (a==""){a=a""$1} else {a=a","$1}}END{print a}'); cut -f1,"$cols" merged.table.subset.tsv | awk -v req="$req" 'BEGIN{FS=OFS="\t"}{n=0; for (i=2;i<=NF;i++){if ($i==1){n++}}; if (n>=req){print $1}}' | awk 'BEGIN{FS=OFS="\t"}{split($1, a, "_"); print a[1], a[2], a[3], a[4]}' > group.ELS/"$group"/"$group".specific.ELS.bed; done
#******

#******
# 10. load conda environment
conda activate ENCODE_RC
#******

#******
# 11. generate bedfiles of group-specific and common ELS 
# with min. distance of 2 Kb (up/downstream) 
# from all annotated TSS
cut -f1 tissues.groups.tsv | while read group; do bedtools intersect -a group.ELS/"$group"/"$group".specific.ELS.bed -b ../TSS.bedfiles/gencode.v19.all.genes.non.redundant.TSSs.2Kb.upstream.downstream.bed -v > group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed; done
#******

#******
# 12. retrieve lists of 
# group-specific and common TSS-distal ELS 
# intersecting with introns / exons / intergenic regions
cut -f1 tissues.groups.tsv | while read group; do 

	# 12.1 - intersection w/ introns
	bedtools intersect -a group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed -b gencode.v19.introns.bed -u > group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.intronic.bed

	# 12.2 - intersection w/ exons 
	bedtools intersect -a group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed -b gencode.v19.exons.bed -u > group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.exonic.bed

	# 12.3 - intersection w/ intergenic regions
	bedtools intersect -a group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed -b gencode.v19.all.genes.gene.body.bed -v > group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.intergenic.bed
		
done
#******

#******
# 13. summary stats of numbers of
# group-specific and common TSS-distal ELS
# intersecting introns / exons / intergenic regions
for type in intronic exonic intergenic; do
	cut -f1 tissues.groups.tsv | while read group; do			
		
		total=$(awk 'BEGIN{n=0}{n++}END{print n}' group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed)
		fraction=$(awk 'BEGIN{n=0}{n++}END{print n}' group.ELS/"$group"/"$group".specific.ELS.distal.2Kb."$type".bed)
		echo -e "$total\t$fraction\t$type\t$group"

	done
done > group.ELS/summary.stats.tsv
#****** 

#******
# 14. retrieve lists of genes 
# with at least one intronic or exonic
# group-specific or common TSS-distal ELS
cut -f1 tissues.groups.tsv | while read group; do
	
	# 14.1. intersection with introns
	bedtools intersect -a gencode.v19.introns.bed -b group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed | cut -f7 | sort -u > group.ELS/"$group"/"$group".genes.intronic.txt
	bedtools intersect -a gencode.v19.introns.bed -b group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed -wo > group.ELS/"$group"/"$group".genes.intronic.tsv


	# 14.2.	intersection with exons
	bedtools intersect -a gencode.v19.exons.bed -b group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed | cut -f7 | sort -u > group.ELS/"$group"/"$group".genes.exonic.txt
	bedtools intersect -a gencode.v19.exons.bed -b group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed -wo > group.ELS/"$group"/"$group".genes.exonic.tsv	

done
#******

#******
# 15. retrieve lists of genes 
# with at least one group-specific or common
# TSS-distal ELS
cut -f1 tissues.groups.tsv | while read group; do
	bedtools intersect -a gencode.v19.all.genes.gene.body.bed -b group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed -u > group.ELS/"$group"/"$group".genes.txt
done
#******

#******
# 16. compute number of 
# non-redundant introns
# per gene
cut -f1,2,3,6,7 gencode.v19.introns.bed | sort -u | cut -f5 | sort | uniq -c | awk '{print $2"\t"$1}' > gencode.v19.number.introns.per.gene.tsv
#******

#******
# 17. compute size
# of non-redundant introns
# per gene
cut -f1,2,3,6,7 gencode.v19.introns.bed | sort -u | awk '{print $5"\t"($3-$2)}' > gencode.v19.intron.sizes.tsv
#*******

#*******
# 18. retrieve, for each
# non-redundant intron of a gene,
# the number of ccREs intersecting
# with that intron
cut -f1 tissues.groups.tsv | while read group; do 
	bedtools intersect -a <(sort -u -k1,1 -k2,2 -k3,3 -k6,6 -k7,7 gencode.v19.introns.bed) -b group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.bed -c | awk '$NF>0' > group.ELS/"$group"/"$group".specific.ELS.distal.2Kb.per.intron.bed; 
done
#*******

#*******
# 19. compute tissue-specificity for ELSs
awk 'BEGIN{FS=OFS="\t"}NR>1{n=0; for (i=2; i<=NF; i++){if ($i>0){n++}}; split($1, a, "_"); print a[1], a[2], a[3], a[4], n}' merged.table.tsv > ELS.sharing.tsv
bedtools intersect -a ELS.sharing.tsv -b gencode.v19.all.genes.gene.body.bed -u > ELS.sharing.genic.tsv 
bedtools intersect -a ELS.sharing.tsv -b gencode.v19.all.genes.gene.body.bed -v > ELS.sharing.intergenic.tsv 
#*******
